plugins {
	id 'com.android.application'
}

apply from: file('publish.gradle')
apply plugin: "jacoco"

jacoco {
	toolVersion = "0.8.6"
}

tasks.withType(Test) {
	jacoco.includeNoLocationClasses = true
	jacoco.excludes = ['jdk.internal.*']
}

android {
	compileSdkVersion 30
	buildToolsVersion "29.0.3"
	testBuildType "release"

	defaultConfig {
		applicationId "com.tease.androidactionstest"
		minSdkVersion 29
		targetSdkVersion 30
		versionCode 1
		versionName "1.0"

		testInstrumentationRunner "android.test.InstrumentationTestRunner"
		testHandleProfiling true
		testFunctionalTest true
	}

	buildTypes {
		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
		}
		debug {
			testCoverageEnabled true
		}
	}

	testOptions {
		execution 'ANDROID_TEST_ORCHESTRATOR'
		animationsDisabled true
		unitTests {
			includeAndroidResources = true
		}
	}

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8
	}
}

dependencies {
	implementation 'com.tease.androidactionstest:androidlibraryactionstest:1.1.1.37'
	implementation 'androidx.appcompat:appcompat:1.2.0'
	implementation 'com.google.android.material:material:1.2.1'
	implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
	testImplementation 'junit:junit:4.+'
	androidTestImplementation 'androidx.test.ext:junit:1.1.2'
	androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}

task jacocoUnitTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
	def coverageSourceDirs = [
		"src/main/java"
	]
	def fileFilter = [
		'**/R.class',
		'**/R$*.class',
		'**/*$ViewInjector*.*',
		'**/*$ViewBinder*.*',
		'**/BuildConfig.*',
		'**/Manifest*.*'
	]
	def javaClasses = fileTree(
		dir: "$buildDir/intermediates/classes/debug",
		excludes: fileFilter
	)
	classDirectories.from = files([ javaClasses ])
	additionalSourceDirs.from = files(coverageSourceDirs)
	sourceDirectories.from = files(coverageSourceDirs)
	executionData.from = fileTree(dir: "$buildDir", includes: [
		"jacoco/testDebugUnitTest.exec"
	])
	reports {
		xml.enabled = true
		html.enabled = true
	}
}