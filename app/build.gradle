plugins {
	id 'com.android.application'
	id 'jacoco'
}

apply from: file('publish.gradle')

android {
	compileSdkVersion 30
	buildToolsVersion "29.0.3"
	testBuildType "debug"

	defaultConfig {
		applicationId "com.tease.androidactionstest"
		minSdkVersion 29
		targetSdkVersion 30
		versionCode 1
		versionName "1.0"

		testInstrumentationRunner "org.junit.runners.JUnit4"
		testHandleProfiling true
		testFunctionalTest true
	}

	buildTypes {
		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
			testCoverageEnabled true
		}
		debug {
			testCoverageEnabled true
		}
	}

	testOptions {
		execution 'ANDROID_TEST_ORCHESTRATOR'
		animationsDisabled true
		unitTests {
			includeAndroidResources = true
		}
	}

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8
	}
}

dependencies {
	implementation 'com.tease.androidactionstest:androidlibraryactionstest:1.1.1.37'
	implementation 'androidx.appcompat:appcompat:1.2.0'
	implementation 'com.google.android.material:material:1.2.1'
	implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
	testImplementation 'junit:junit:4.13.1'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
	androidTestImplementation 'androidx.test:runner:1.3.0'
	androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}


def coverageSourceDirs = [
	'./src/main/java'
]

def debugTree = fileTree(
	dir: './build/intermediates/javac/debug',
	excludes: ['**//*R.class',
	           '**//*R$*.class',
	           '***/*//*$ViewInjector*.*',
	           '**//*BuildConfig.*',
	           '**//*Manifest*.*']
)

def testDebugUnitTestExec = './build/jacoco/testDebugUnitTest.exec';

task generateJacocoTestReports(type: JacocoReport, dependsOn: "test") {
	group = "Reporting"
	description = 'Generate Jacoco Robolectric unit test coverage reports'

	classDirectories.from = files(debugTree)
	sourceDirectories.from = files(coverageSourceDirs)
	additionalSourceDirs.from = files(coverageSourceDirs)
	executionData.from = files(testDebugUnitTestExec)
}

def coverageLimit = System.getenv('COVERAGE_LIMIT') ?: project.properties['COVERAGE_LIMIT']

task jacocoTestCoverageVerification(type: JacocoCoverageVerification, dependsOn: 'generateJacocoTestReports') {
	sourceDirectories.from = files(coverageSourceDirs)
	classDirectories.from = files(debugTree)
	executionData.from = files(testDebugUnitTestExec)
	violationRules {
		failOnViolation = true
		rule {
			limit {
				minimum = coverageLimit.toFloat()
			}
		}
	}
}